const mysql2 = require('mysql2');
const Master = require(__dirname + '/master.json');
const Pokemon_Array = Object.keys(Master.Pokemon).map(i => Master.Pokemon[i]);

// #########################################################
// IF YOU ARE ALREADY USING WDR2 THIS WILL NOT WORK FOR YOU
// YOU MUST USE dbMigrate2.js
// #########################################################

const old_database = mysql2.createConnection({
    supportBigNumbers: true,
    host: '',
    user: '',
    password: '',
    port: 3306,
    database: 'pokebot'
});

const new_database = mysql2.createConnection({
    supportBigNumbers: true,
    host: '',
    user: '',
    password: '',
    port: 3306,
    database: ''
});

setTimeout(function() {
    old_database.query(
        `SELECT
    *
    FROM
    users;`,
        async function(error, users) {
            for (let u = 0, ulen = users.length; u < ulen; u++) {
                let user = users[u];

                new_database.query(
                    `INSERT IGNORE INTO
                        wdr_users (
                            user_id,
                            user_name,
                            guild_id,
                            guild_name,
                            bot,
                            areas,
                            quest_time
                        )
                        VALUES (
                            ${user.user_id},
                            '${user.user_name.slice(0,-4)}',
                            '${user.discord_id}',
                            'Migrated',
                            ${user.bot},
                            '${user.geofence}',
                            '${user.quest_time}'
                        )`,
                    async function(error) {
                        if (error) {
                            console.error(error);
                            console.error(user);
                        } else {
                            console.log('[dbMigrate] User ' + user.user_name + ' Inserted into User Table.');
                        }
                    }
                );

                if (user.pokemon) {
                    let pokemons = JSON.parse(user.pokemon);
                    for (let p = 0, plen = pokemons.subscriptions.length; p < plen; p++) {
                        let pokemon = pokemons.subscriptions[p];
                        let new_poke = {};

                        try {
                            if (!pokemon.pokemon_id && (!pokemon || !pokemon.pokemon_id)) {
                            for (let m = 0, mlen = Pokemon_Array.length; m < mlen; m++) {
                                    let arr_poke = Pokemon_Array[m];
                                    if (arr_poke.name.toLowerCase() == pokemon.name) {
                                        new_poke.pokemon_id = arr_poke.pokedex_id;
                                    }
                                }
                            } else {
                                new_poke.pokemon_id = pokemon.pokemon_id ? pokemon.pokemon_id : 0;
                                if (isNaN(new_poke.pokemon_id) && new_poke.pokemon_id.toLowerCase() == 'all') {
                                    new_poke.pokemon_id = 0;
                                }
                            }
                            new_poke.pokemon_id = new_poke.pokemon_id ? new_poke.pokemon_id : 0;

                            new_poke.form = pokemon.form ? pokemon.form : 0;
                            if (isNaN(new_poke.form) && new_poke.form.toLowerCase() == 'all') {
                                new_poke.form = 0;
                            }

                            new_poke.min_iv = pokemon.min_iv ? pokemon.min_iv : 0;
                            if (new_poke.min_iv.toLowerCase() == 'all') {
                                new_poke.min_iv = 0;
                            }

                            new_poke.max_iv = pokemon.max_iv ? pokemon.max_iv : 100;
                            if (new_poke.max_iv.toLowerCase() == 'all') {
                                new_poke.max_iv = 100;
                            }

                            new_poke.min_lvl = pokemon.min_lvl ? pokemon.min_lvl : 0;
                            if (new_poke.min_lvl.toLowerCase() == 'all') {
                                new_poke.min_lvl = 0;
                            }

                            new_poke.max_lvl = pokemon.max_lvl ? pokemon.max_lvl : 35;
                            if (new_poke.max_lvl.toLowerCase() == 'all') {
                                new_poke.max_lvl = 35;
                            }

                            new_poke.gender = pokemon.gender ? pokemon.gender : 0;
                            if (new_poke.gender.toLowerCase() == 'all') {
                                new_poke.gender = 0;
                            }

                            new_poke.size = pokemon.size ? pokemon.size : 0;
                            if (new_poke.size !== 0 && new_poke.size.toLowerCase() == 'all') {
                                new_poke.size = 0;
                            }

                            new_database.query(
                                `INSERT IGNORE INTO
                                wdr_pokemon_subs (
                                    user_id,
                                    user_name,
                                    guild_id,
                                    guild_name,
                                    bot,
                                    areas,
                                    pokemon_id,
                                    form,
                                    min_lvl,
                                    max_lvl,
                                    min_iv,
                                    max_iv,
                                    size,
                                    gender
                                )
                            VALUES
                                (
                                    '${user.user_id}',
                                    '${user.user_name}',
                                    '${user.discord_id}',
                                    'Migrated',
                                    '${user.bot}',
                                    '${user.geofence}',
                                    '${new_poke.pokemon_id}',
                                    '${new_poke.form}',
                                    '${new_poke.min_lvl}',
                                    '${new_poke.max_lvl}',
                                    '${new_poke.min_iv}',
                                    '${new_poke.max_iv}',
                                    '${new_poke.size}',
                                    '${new_poke.gender}'
                                )`,
                                async function(error) {
                                    if (error) {
                                        console.error(user);
                                        console.error(new_poke);
                                        console.error('[dbMigrate] Error Inserting Pokemon Subscription.', error);
                                    } else {
                                        console.log('[dbMigrate] Subscription for ' + user.user_name + ' Inserted into Subscription Table.');
                                    }
                                }
                            );
                        } catch (e) {
                            console.error(e);
                            console.error(pokemon);
                        }
                    }
                }

                if (user.raids) {
                    let raids = JSON.parse(user.raids);
                    for (let r = 0, rlen = raids.subscriptions.length; r < rlen; r++) {
                        let raid = raids.subscriptions[r];
                        let new_raid = {};
                        try {
                            new_raid.gym_id = raid.id ? raid.id : 0;
                        if (isNaN(new_raid.gym_id) && new_raid.gym_id.toLowerCase() == 'all') {
                            new_raid.gym_id = 0;
                        }

                        new_raid.pokemon_id = raid.pokemon.pokemon_id ? raid.pokemon.pokemon_id : 0;
                        if (isNaN(new_raid.pokemon_id) && new_raid.pokemon_id.toLowerCase() == 'all') {
                            new_raid.pokemon_id = 0;
                        }

                        new_raid.form = raid.pokemon.form ? raid.pokemon.form : 0;
                        if (isNaN(new_raid.form) && new_raid.form.toLowerCase() == 'all') {
                            new_raid.form = 0;
                        }

                        new_raid.min_lvl = raid.min_lvl ? raid.min_lvl : 1;
                        if (isNaN(new_raid.min_lvl) && (new_raid.min_lvl == 'Boss Specified' || new_raid.min_lvl.toLowerCase() == 'all')) {
                            new_raid.min_lvl = 1;
                        }

                        new_raid.max_lvl = raid.max_lvl ? raid.max_lvl : 5;
                        if (isNaN(new_raid.max_lvl) && (new_raid.max_lvl == 'Boss Specified' || new_raid.max_lvl.toLowerCase() == 'all')) {
                            new_raid.max_lvl = 5;
                        }

                        new_database.query(
                            `INSERT IGNORE INTO
                                wdr_raid_subs (
                                    user_id,
                                    user_name,
                                    guild_id,
                                    guild_name,
                                    bot,
                                    areas,
                                    pokemon_id,
                                    form,
                                    min_lvl,
                                    max_lvl,
                                    gym_id
                                )
                            VALUES
                                (
                                    '${user.user_id}',
                                    '${user.user_name}',
                                    '${user.discord_id}',
                                    'Migrated',
                                    '${user.bot}',
                                    '${user.geofence}',
                                    '${new_raid.pokemon_id}',
                                    '${new_raid.form}',
                                    '${new_raid.min_lvl}',
                                    '${new_raid.max_lvl}',
                                    '${new_raid.gym_id}'
                                )`,
                            async function(error) {
                                if (error) {
                                    console.error(user);
                                    console.error(new_raid);
                                    console.error('[dbMigrate] Error Inserting Raid Subscription.', error);
                                } else {
                                    console.log('[dbMigrate] Subscription for ' + user.user_name + ' Inserted into Subscription Table.');
                                }
                            }
                        );
                        } catch (e) {
                            console.error(e);
                            console.error(raid);
                        }
                    }
                }

                if (user.pvp) {
                    let pvps = JSON.parse(user.pvp);
                    for (let v = 0, vlen = pvps.subscriptions.length; v < vlen; v++) {
                        let pvp = pvps.subscriptions[v];
                        let new_pvp = {};


                        for (let m = 0, mlen = Pokemon_Array.length; m < mlen; m++) {
                            let arr_poke = Pokemon_Array[m];
                            if (arr_poke.name.toLowerCase() == pvp.name) {
                                new_pvp.pokemon_id = arr_poke.pokedex_id;
                            }
                        }
                        new_pvp.pokemon_id = new_pvp.pokemon_id ? new_pvp.pokemon_id : 0;

                        new_pvp.min_rank = pvp.min_rank ? pvp.min_rank : 20;

                        new_pvp.league = pvp.league ? pvp.league.toLowerCase() : 'all';
                        if (new_pvp.league.toLowerCase() == 'master') {
                            new_pvp.league == 'all';
                        }

                        new_pvp.min_cp = pvp.min_cp ? pvp.min_cp : 0;

                        new_pvp.max_cp = pvp.max_cp ? pvp.max_cp : 10000;

                        new_database.query(
                            `INSERT IGNORE INTO
                  wdr_pvp_subs (
                      user_id,
                      user_name,
                      guild_id,
                      guild_name,
                      bot,
                      areas,
                      pokemon_id,
                      min_rank,
                      min_cp,
                      max_cp,
                      league
                  )
               VALUES
                  (
                    '${user.user_id}',
                    '${user.user_name}',
                    '${user.discord_id}',
                    'Migrated',
                    '${user.bot}',
                    '${user.geofence}',
                    '${new_pvp.pokemon_id}',
                    '${new_pvp.min_rank}',
                    '${new_pvp.min_cp}',
                    '${new_pvp.max_cp}',
                    '${new_pvp.league}'
                  )`,
                            async function(error) {
                                if (error) {
                                    console.error(user);
                                    console.error(new_pvp);
                                    console.error('[dbMigrate] Error Inserting PvP Subscription.', error);
                                } else {
                                    console.log('[dbMigrate] Subscription for ' + user.user_name + ' Inserted into Subscription Table.');
                                }
                            }
                        );
                    }
                }

                if (user.quests) {
                    let quests = user.quests.split(',');
                    quests.forEach((quest) => {
                        let new_quest = {};

                        for (let m = 0, mlen = Pokemon_Array.length; m < mlen; m++) {
                            let arr_qpoke = Pokemon_Array[m];
                            if (arr_qpoke.name.toLowerCase() == quest.toLowerCase()) {
                                new_quest.pokemon_id = arr_qpoke.pokedex_id;
                            }
                        }
                        new_quest.pokemon_id = new_quest.pokemon_id ? new_quest.pokemon_id : 0;
                        new_quest.form = 0;

                        if (new_quest.pokemon_id === 0) {
                            new_quest.reward = quest;
                        }

                        new_database.query(
                            `INSERT IGNORE INTO
                                wdr_quest_subs (
                                    user_id,
                                    user_name,
                                    guild_id,
                                    guild_name,
                                    bot,
                                    areas,
                                    pokemon_id,
                                    form,
                                    reward,
                                    alert_time
                                )
                            VALUES
                                (
                                    '${user.user_id}',
                                    '${user.user_name}',
                                    '${user.discord_id}',
                                    'Migrated',
                                    '${user.bot}',
                                    '${user.geofence}',
                                    '${new_quest.pokemon_id}',
                                    '${new_quest.form}',
                                    '${new_quest.reward}',
                                    '${user.quest_time}'
                                )`,
                            async function(error) {
                                if (error) {
                                    console.error(user);
                                    console.error(new_quest);
                                    console.error('[dbMigrate] Error Inserting Quest Subscription.', error);
                                } else {
                                    console.log('[dbMigrate] Subscription for ' + user.user_name + ' Inserted into Subscription Table.');
                                }
                            }
                        );

                    });
                }
            }
        }
    );
}, 5000);
